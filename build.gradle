buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'
apply plugin: 'maven'

ext.configFile = file "build.properties"
configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

version = "${config.minecraft_version}-${config.mod_version}-B" + System.getenv("BUILD_NUMBER")
group= "com.dyonovan.teambrcore" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "teambrcore"

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
    replaceIn "Constants.java"
    replace "@VERSION@", "${config.mod_version}"
    runDir = "eclipse"
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task devJar(type: Jar, dependsOn: 'classes') {
    from(sourceSets.main.output) {
        include '**'
    }
    extension = 'jar'
    classifier = 'dev'
}

artifacts {
    archives devJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            if (project.hasProperty("forgemaven_url")) {
                logger.info('Publishing to files server')
                repository(url: project.forgemaven_url) {
                    authentication(userName: project.forgemaven_username, password: project.forgemaven_password)
                }
            }
            pom {
                groupId = project.group
                version = project.version
                artifactId = project.archivesBaseName
            }
            pom.project {
                name project.archivesBaseName
                packaging 'jar'
                description 'TeamBR-Core'
                url 'https://github.com/TeamBR-Modding/TeamBR-Core/'
                scm {
                    url 'https://github.com/TeamBR-Modding/TeamBR-Core/'
                    connection 'scm:git:git://github.com/TeamBR-Modding/TeamBR-Core.git'
                    developerConnection 'scm:git:git@github.com/TeamBR-Modding/TeamBR-Core.git'
                }
                issueManagement {
                    system 'github'
                    url 'https://github.com/TeamBR-Modding/TeamBR-Core/issues'
                }
                licenses {
                    license {
                        name 'Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License'
                        url 'http://creativecommons.org/licenses/by-nc-sa/4.0/'
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        id 'Dyonovan'
                        name 'Dyonovan'
                        roles {
                            role 'developer'
                        }
                    }
                    developer {
                        id 'pauljoda'
                        name 'pauljoda'
                        roles {
                            role 'developer'
                        }
                    }
                }
            }
        }
    }
}